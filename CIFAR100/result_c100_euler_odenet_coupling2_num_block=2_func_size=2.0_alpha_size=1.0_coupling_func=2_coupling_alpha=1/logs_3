/data4/zhangxiao/multi_scale_ODE/cifar100_coupling/ode_cifar100_coupling.py
import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
import torch.nn.functional as F

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=160)
parser.add_argument('--data_aug', type=eval, default=True, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.1)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=128)

parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
parser.add_argument('--method', type = str, choices=['euler', 'midpoint','dopri5','adaptive_heun'], default = 'euler')
parser.add_argument('--seed', type = int, default = 0)
parser.add_argument('--func', type=str, choices=['odetem','coupling','coupling2','temfunc'], default='odetem')
parser.add_argument('--num_block', type = int, default = 3)
parser.add_argument('--step_size', type=float, default=0.05)
parser.add_argument('--depth', type=float, default=1.0)
parser.add_argument('--hidden_dim', type=int, default=1000)
parser.add_argument('--coupling', type=int, default=2)
parser.add_argument('--coupling_func', type=int, default=2)
parser.add_argument('--coupling_alpha', type=int, default=1)
parser.add_argument('--func_size', type=float, default=1.0)
parser.add_argument('--alpha_size', type=float, default=1.0)


args = parser.parse_args()

import random
random.seed(args.seed)
np.random.seed(args.seed)
torch.manual_seed(args.seed)
torch.cuda.manual_seed_all(args.seed)
torch.backends.cudnn.deterministic = True
torch.backends.cudnn.benchmark = False

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


def norm(dim):
    return nn.GroupNorm(min(32, dim), dim)


class ResBlock(nn.Module):
    expansion = 1

    def __init__(self, inplanes, planes, stride=1, downsample=None):
        super(ResBlock, self).__init__()
        self.norm1 = norm(inplanes)
        self.relu = nn.ReLU(inplace=True)
        self.downsample = downsample
        self.conv1 = conv3x3(inplanes, planes, stride)
        self.norm2 = norm(planes)
        self.conv2 = conv3x3(planes, planes)

    def forward(self, x):
        shortcut = x

        out = self.relu(self.norm1(x))

        if self.downsample is not None:
            shortcut = self.downsample(out)

        out = self.conv1(out)
        out = self.norm2(out)
        out = self.relu(out)
        out = self.conv2(out)

        return out + shortcut


class ConcatConv2d(nn.Module):

    def __init__(self, dim_in, dim_out, ksize=3, stride=1, padding=0, dilation=1, groups=1, bias=True, transpose=False):
        super(ConcatConv2d, self).__init__()
        module = nn.ConvTranspose2d if transpose else nn.Conv2d
        self._layer = module(
            dim_in + 1, dim_out, kernel_size=ksize, stride=stride, padding=padding, dilation=dilation, groups=groups,
            bias=bias
        )

    def forward(self, t, x):
        tt = torch.ones_like(x[:, :1, :, :]) * t
        ttx = torch.cat([tt, x], 1)
        return self._layer(ttx)


class ODEfunc(nn.Module):

    def __init__(self, dim, kernel_size):
        super(ODEfunc, self).__init__()
        self.norm1 = norm(dim)
        self.relu = nn.ReLU(inplace=True)
        self.conv1 = ConcatConv2d(dim, dim, kernel_size, 1, (kernel_size//2))
        self.norm2 = norm(dim)
        self.conv2 = ConcatConv2d(dim, dim, kernel_size, 1, (kernel_size//2))
        self.norm3 = norm(dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        out = self.norm1(x)
        out = self.relu(out)
        out = self.conv1(t, out)
        out = self.norm2(out)
        out = self.relu(out)
        out = self.conv2(t, out)
        out = self.norm3(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()

    def forward(self, x):
        self.integration_time = self.integration_time.type_as(x)
        out = odeint(self.odefunc, x, self.integration_time, rtol=args.tol, atol=args.tol)
        return out[1]

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value

##############################kernel_size=1,3,5,7,9 结合TEM,异步耦合###################
class ODEBlock_coupling(nn.Module):

    def __init__(self, dim):
        super(ODEBlock_coupling, self).__init__()
        self.odefunc = nn.ModuleList([ODEfunc(dim, 3).to(device),ODEfunc(dim, 5).to(device),ODEfunc(dim, 7).to(device)])
        self.alphafc = nn.Sequential(nn.Linear(args.num_block, args.hidden_dim), nn.Tanh(), nn.Linear(args.hidden_dim, args.num_block))

    def forward(self, x):
        num_step = int(args.depth/args.step_size)
        out = x; t = 0.0
        alpha = torch.ones(args.num_block).to(device) / args.num_block
        for i in range(num_step):
            dhdt = 0
            weight = F.softmax(alpha, dim=-1)
            if i % args.coupling_func == 0:
                for j in range(args.num_block):
                    dhdt = dhdt + self.odefunc[j](t,out) * weight[j]
                out = out + dhdt * args.step_size * args.func_size
            if i % args.coupling_alpha == 0:
                alpha = alpha + self.alphafc(alpha.unsqueeze(0)).squeeze() * args.step_size  * args.alpha_size
            t = t + args.step_size
        return out
##############################kernel_size=1,3,5,7,9 结合TEM,异步耦合    2    ###################
class ODEBlock_coupling2(nn.Module):

    def __init__(self, dim):
        super(ODEBlock_coupling2, self).__init__()
        self.odefunc = nn.ModuleList([ODEfunc(dim, 3).to(device),ODEfunc(dim, 5).to(device)])#,ODEfunc(dim, 7).to(device)
        self.alphafc = nn.Sequential(nn.Linear(args.num_block, args.hidden_dim), nn.Tanh(), nn.Linear(args.hidden_dim, args.num_block))

    def forward(self, x):
        num_step = int(args.depth/args.step_size)
        out = x; t = 0.0
        alpha = torch.ones(args.num_block).to(device) / args.num_block
        for i in range(num_step):
            dhdt = 0
            weight = F.softmax(alpha, dim=-1)
            if i % args.coupling_func == 0:
                for j in range(args.num_block):
                    dhdt = dhdt + self.odefunc[j](t,out) * weight[j]
                out = out + dhdt * args.step_size * args.func_size
            if i % args.coupling_alpha == 0:
                alpha = alpha + self.alphafc(alpha.unsqueeze(0)).squeeze() * args.step_size  * args.alpha_size
            t = t + args.step_size
        return out
##############################kernel_size=1,3,5,7,9 结合TEM,异步耦合###################
class ODEBlock_tem_func(nn.Module):

    def __init__(self, dim):
        super(ODEBlock_tem_func, self).__init__()
        self.odefunc = nn.ModuleList([ODEfunc(dim, 3).to(device), ODEfunc(dim, 5).to(device), ODEfunc(dim, 7).to(device)])
        self.alphafc = nn.Sequential(nn.Linear(args.num_block, args.hidden_dim), nn.Tanh(), nn.Linear(args.hidden_dim, args.num_block))

    def forward(self, x):
        num_step = int(args.depth/args.step_size)
        out = x; t = 0.0
        alpha = torch.ones(args.num_block).to(device) / args.num_block
        for i in range(num_step):
            dhdt = 0
            weight = F.softmax(alpha, dim=-1)
            if i % args.coupling == 0:
                for j in range(args.num_block):
                    dhdt = dhdt + self.odefunc[j](t,out) * weight[j]
                out = out + dhdt * args.step_size * 2
            alpha = alpha + self.alphafc(alpha.unsqueeze(0)).squeeze() * args.step_size
            t = t + args.step_size
        return out

##############################TEM###################
class ODEBlock(nn.Module):

    def __init__(self, dim):
        super(ODEBlock, self).__init__()
        self.odefunc = nn.ModuleList([ODEfunc(dim,3).to(device) for _ in range(args.num_block)])
        self.alphafc = nn.Sequential(nn.Linear(args.num_block, args.hidden_dim), nn.Tanh(), nn.Linear(args.hidden_dim, args.num_block))

    def forward(self, x):
        num_step = int(args.depth/args.step_size)
        out = x; t = 0.0
        alpha = torch.ones(args.num_block).to(device) / args.num_block
        for i in range(num_step):
            dhdt = 0
            weight = F.softmax(alpha, dim=-1)
            if i % args.coupling_func == 0:
                for j in range(args.num_block):
                    dhdt = dhdt + self.odefunc[j](t,out) * weight[j]
                out = out + dhdt * args.step_size * args.func_size
            if i % args.coupling_alpha == 0:
                alpha = alpha + self.alphafc(alpha.unsqueeze(0)).squeeze() * args.step_size  * args.alpha_size
            t = t + args.step_size
        return out

class Flatten(nn.Module):

    def __init__(self):
        super(Flatten, self).__init__()

    def forward(self, x):
        shape = torch.prod(torch.tensor(x.shape[1:])).item()
        return x.view(-1, shape)


class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val

def get_cifar100_loaders(data_aug=False, batch_size=128, test_batch_size=128, perc=1.0):
    normalize = transforms.Normalize(mean=[0.485, 0.456, 0.406],
                                     std=[0.229, 0.224, 0.225])
    if data_aug:
        transform_train = transforms.Compose([
            transforms.RandomHorizontalFlip(),
            transforms.RandomCrop(32, padding=4),
            transforms.ToTensor(),
            normalize,
        ])
    else:
        transform_train = transforms.Compose([
            transforms.ToTensor(),
            normalize,
        ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
            normalize,
    ])

    train_loader = DataLoader(
        datasets.CIFAR100(root='/data1/XIAO_XIAO/NODE/example-y0-noise/data', train=True, download=True, transform=transform_train), batch_size=batch_size,
        shuffle=True, num_workers=2, drop_last=True
    )

    test_loader = DataLoader(
        datasets.CIFAR100(root='/data1/XIAO_XIAO/NODE/example-y0-noise/data', train=False, download=True, transform=transform_test),
        batch_size=test_batch_size, shuffle=False, num_workers=2, drop_last=True
    )

    return train_loader, test_loader, None


def inf_generator(iterable):
    """Allows training with DataLoaders in a single infinite loop:
        for i, (x, y) in enumerate(inf_generator(train_loader)):
    """
    iterator = iterable.__iter__()
    while True:
        try:
            yield iterator.__next__()
        except StopIteration:
            iterator = iterable.__iter__()


def learning_rate_with_decay(batch_size, batch_denom, batches_per_epoch, boundary_epochs, decay_rates):
    initial_learning_rate = args.lr * batch_size / batch_denom

    boundaries = [int(batches_per_epoch * epoch) for epoch in boundary_epochs]
    vals = [initial_learning_rate * decay for decay in decay_rates]

    def learning_rate_fn(itr):
        lt = [itr < b for b in boundaries] + [True]
        i = np.argmax(lt)
        return vals[i]

    return learning_rate_fn


def one_hot(x, K):
    return np.array(x[:, None] == np.arange(K)[None, :], dtype=int)

def accuracy(model, dataset_loader):
    correct_1 = 0.0
    correct_5 = 0.0
    for x, y in dataset_loader:
        x = x.to(device)
        y = y.to(device)

        output = model(x)

        _, pred = output.topk(5, 1, largest=True, sorted=True)
        label = y.view(y.size(0), -1).expand_as(pred)
        correct = pred.eq(label).float()
        ####compute top1
        correct_1 += correct[:,:1].sum()
        ####compute top5
        correct_5 += correct[:,:5].sum()

    return correct_1 / len(dataset_loader.dataset), correct_5 / len(dataset_loader.dataset)

def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)


def makedirs(dirname):  # 判断是否需要创建文件夹,存在则跳过
    if not os.path.exists(dirname):
        os.makedirs(dirname)


def get_logger(logpath, filepath, package_files=[], displaying=True, saving=True, debug=False):
    logger = logging.getLogger()
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.setLevel(level)
    if saving:
        info_file_handler = logging.FileHandler(logpath, mode="a")
        info_file_handler.setLevel(level)
        logger.addHandler(info_file_handler)
    if displaying:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        logger.addHandler(console_handler)
    logger.info(filepath)
    with open(filepath, "r") as f:
        logger.info(f.read())

    for f in package_files:
        logger.info(f)
        with open(f, "r") as package_f:
            logger.info(package_f.read())

    return logger
from thop import profile

if __name__ == '__main__':

    path_seed = './result_c100_{}_{}_{}_num_block={}_func_size={}_alpha_size={}_coupling_func={}_coupling_alpha={}'.format(args.method, args.network, args.func, args.num_block, args.func_size,  args.alpha_size, args.coupling_func, args.coupling_alpha)
    if not os.path.isdir(path_seed):
        os.makedirs(path_seed)
    makedirs(path_seed)
    logger = get_logger(logpath=os.path.join(path_seed, 'logs_{}'.format(args.seed)), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'

    if args.downsampling_method == 'conv':
        downsampling_layers = [
            nn.Conv2d(3, 64, 3, 1),
            norm(64),
            nn.ReLU(inplace=True),
            nn.Conv2d(64, 64, 4, 2, 1),
            norm(64),
            nn.ReLU(inplace=True),
            nn.Conv2d(64, 64, 4, 2, 1),
        ]
    elif args.downsampling_method == 'res':
        downsampling_layers = [
            nn.Conv2d(3, 64, 3, 1),
            ResBlock(64, 64, stride=2, downsample=conv1x1(64, 64, 2)),
            ResBlock(64, 64, stride=2, downsample=conv1x1(64, 64, 2)),
        ]
    
    if args.func == 'odetem':
        feature_layers = [ODEBlock(64)] if is_odenet else [ResBlock(64, 64) for _ in range(6)]
    if args.func == 'coupling':
        feature_layers = [ODEBlock_coupling(64)] if is_odenet else [ResBlock(64, 64) for _ in range(6)]
    if args.func == 'coupling2':
        feature_layers = [ODEBlock_coupling2(64)] if is_odenet else [ResBlock(64, 64) for _ in range(6)]
    if args.func == 'temfunc':
        feature_layers = [ODEBlock_tem_func(64)] if is_odenet else [ResBlock(64, 64) for _ in range(6)]
    fc_layers = [norm(64), nn.ReLU(inplace=True), nn.AdaptiveAvgPool2d((1, 1)), Flatten(), nn.Linear(64, 100)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)
    x = torch.randn(1, 3, 28, 28).to(device)
    flops, params = profile(model, inputs=(x,))
    print('flops  of ODE is %.2fG' % (flops/1e9))
    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    train_loader, test_loader, train_eval_loader = get_cifar100_loaders(
        args.data_aug, args.batch_size, args.test_batch_size
    )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001]
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    inference_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()

    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        loss.backward()
        optimizer.step()

        batch_time_meter.update(time.time() - end)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc1, train_acc5 = accuracy(model, train_loader)
                inference_end = time.time()
                val_acc1, val_acc5 = accuracy(model, test_loader)
                inference_time_meter.update(time.time() - inference_end)
                if val_acc1 > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(path_seed, 'model_{}.pth'.format(args.seed)))
                    best_acc = val_acc1
                logger.info(
                    "Epoch {:04d} | " "Train_1 Acc {:.4f} | Train_5 Acc {:.4f} | Test_1 Acc {:.4f} | Test_5 Acc {:.4f} |Train Time {:.3f} ({:.3f}) |Test Time {:.3f} ({:.3f})".format(
                        itr // batches_per_epoch, train_acc1, train_acc5, val_acc1, val_acc5, batch_time_meter.val, batch_time_meter.avg, inference_time_meter.val, inference_time_meter.avg
                    )
                )

Namespace(adjoint=False, alpha_size=1.0, batch_size=128, coupling=2, coupling_alpha=1, coupling_func=2, data_aug=True, debug=False, depth=1.0, downsampling_method='conv', func='coupling2', func_size=2.0, gpu=0, hidden_dim=1000, lr=0.1, method='euler', nepochs=160, network='odenet', num_block=2, seed=3, step_size=0.05, test_batch_size=128, tol=0.001)
Sequential(
  (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1))
  (1): GroupNorm(32, 64, eps=1e-05, affine=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): GroupNorm(32, 64, eps=1e-05, affine=True)
  (5): ReLU(inplace=True)
  (6): Conv2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): ODEBlock_coupling2(
    (odefunc): ModuleList(
      (0): ODEfunc(
        (norm1): GroupNorm(32, 64, eps=1e-05, affine=True)
        (relu): ReLU(inplace=True)
        (conv1): ConcatConv2d(
          (_layer): Conv2d(65, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (norm2): GroupNorm(32, 64, eps=1e-05, affine=True)
        (conv2): ConcatConv2d(
          (_layer): Conv2d(65, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (norm3): GroupNorm(32, 64, eps=1e-05, affine=True)
      )
      (1): ODEfunc(
        (norm1): GroupNorm(32, 64, eps=1e-05, affine=True)
        (relu): ReLU(inplace=True)
        (conv1): ConcatConv2d(
          (_layer): Conv2d(65, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
        )
        (norm2): GroupNorm(32, 64, eps=1e-05, affine=True)
        (conv2): ConcatConv2d(
          (_layer): Conv2d(65, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
        )
        (norm3): GroupNorm(32, 64, eps=1e-05, affine=True)
      )
    )
    (alphafc): Sequential(
      (0): Linear(in_features=2, out_features=1000, bias=True)
      (1): Tanh()
      (2): Linear(in_features=1000, out_features=2, bias=True)
    )
  )
  (8): GroupNorm(32, 64, eps=1e-05, affine=True)
  (9): ReLU(inplace=True)
  (10): AdaptiveAvgPool2d(output_size=(1, 1))
  (11): Flatten()
  (12): Linear(in_features=64, out_features=100, bias=True)
)
Number of parameters: 428782
Epoch 0000 | Train_1 Acc 0.0079 | Train_5 Acc 0.0524 | Test_1 Acc 0.0086 | Test_5 Acc 0.0493 |Train Time 0.435 (0.435) |Test Time 3.549 (3.549)
Epoch 0001 | Train_1 Acc 0.0845 | Train_5 Acc 0.2741 | Test_1 Acc 0.0829 | Test_5 Acc 0.2735 |Train Time 0.554 (0.118) |Test Time 3.962 (3.553)
Epoch 0002 | Train_1 Acc 0.1603 | Train_5 Acc 0.4311 | Test_1 Acc 0.1545 | Test_5 Acc 0.4231 |Train Time 0.487 (0.115) |Test Time 3.628 (3.554)
Epoch 0003 | Train_1 Acc 0.2223 | Train_5 Acc 0.5127 | Test_1 Acc 0.2186 | Test_5 Acc 0.5055 |Train Time 0.577 (0.118) |Test Time 4.453 (3.563)
Epoch 0004 | Train_1 Acc 0.2558 | Train_5 Acc 0.5658 | Test_1 Acc 0.2560 | Test_5 Acc 0.5667 |Train Time 0.546 (0.118) |Test Time 4.615 (3.573)
Epoch 0005 | Train_1 Acc 0.2956 | Train_5 Acc 0.6138 | Test_1 Acc 0.2884 | Test_5 Acc 0.5976 |Train Time 0.617 (0.121) |Test Time 4.277 (3.580)
Epoch 0006 | Train_1 Acc 0.3208 | Train_5 Acc 0.6439 | Test_1 Acc 0.3099 | Test_5 Acc 0.6280 |Train Time 0.540 (0.127) |Test Time 4.526 (3.590)
Epoch 0007 | Train_1 Acc 0.3571 | Train_5 Acc 0.6839 | Test_1 Acc 0.3398 | Test_5 Acc 0.6620 |Train Time 0.524 (0.123) |Test Time 4.806 (3.602)
Epoch 0008 | Train_1 Acc 0.3735 | Train_5 Acc 0.6914 | Test_1 Acc 0.3643 | Test_5 Acc 0.6835 |Train Time 0.544 (0.125) |Test Time 4.827 (3.614)
Epoch 0009 | Train_1 Acc 0.3949 | Train_5 Acc 0.7151 | Test_1 Acc 0.3700 | Test_5 Acc 0.6943 |Train Time 0.507 (0.120) |Test Time 4.689 (3.625)
Epoch 0010 | Train_1 Acc 0.4118 | Train_5 Acc 0.7341 | Test_1 Acc 0.3873 | Test_5 Acc 0.7094 |Train Time 0.535 (0.121) |Test Time 4.432 (3.633)
Epoch 0011 | Train_1 Acc 0.4276 | Train_5 Acc 0.7484 | Test_1 Acc 0.4053 | Test_5 Acc 0.7230 |Train Time 0.577 (0.128) |Test Time 4.712 (3.644)
Epoch 0012 | Train_1 Acc 0.4462 | Train_5 Acc 0.7667 | Test_1 Acc 0.4239 | Test_5 Acc 0.7422 |Train Time 0.510 (0.126) |Test Time 4.488 (3.652)
Epoch 0013 | Train_1 Acc 0.4479 | Train_5 Acc 0.7671 | Test_1 Acc 0.4191 | Test_5 Acc 0.7391 |Train Time 0.576 (0.128) |Test Time 5.044 (3.666)
Epoch 0014 | Train_1 Acc 0.4711 | Train_5 Acc 0.7814 | Test_1 Acc 0.4323 | Test_5 Acc 0.7403 |Train Time 0.524 (0.122) |Test Time 4.562 (3.675)
Epoch 0015 | Train_1 Acc 0.4821 | Train_5 Acc 0.7974 | Test_1 Acc 0.4411 | Test_5 Acc 0.7541 |Train Time 0.667 (0.121) |Test Time 4.502 (3.684)
Epoch 0016 | Train_1 Acc 0.4916 | Train_5 Acc 0.8047 | Test_1 Acc 0.4527 | Test_5 Acc 0.7681 |Train Time 0.557 (0.128) |Test Time 4.761 (3.694)
Epoch 0017 | Train_1 Acc 0.4851 | Train_5 Acc 0.7981 | Test_1 Acc 0.4403 | Test_5 Acc 0.7522 |Train Time 0.562 (0.124) |Test Time 4.680 (3.704)
Epoch 0018 | Train_1 Acc 0.5126 | Train_5 Acc 0.8149 | Test_1 Acc 0.4559 | Test_5 Acc 0.7644 |Train Time 0.516 (0.130) |Test Time 4.571 (3.713)
Epoch 0019 | Train_1 Acc 0.5214 | Train_5 Acc 0.8240 | Test_1 Acc 0.4692 | Test_5 Acc 0.7742 |Train Time 0.559 (0.121) |Test Time 4.492 (3.721)
Epoch 0020 | Train_1 Acc 0.5205 | Train_5 Acc 0.8204 | Test_1 Acc 0.4688 | Test_5 Acc 0.7734 |Train Time 0.588 (0.128) |Test Time 4.325 (3.727)
Epoch 0021 | Train_1 Acc 0.5419 | Train_5 Acc 0.8328 | Test_1 Acc 0.4809 | Test_5 Acc 0.7790 |Train Time 0.519 (0.127) |Test Time 4.616 (3.736)
Epoch 0022 | Train_1 Acc 0.5428 | Train_5 Acc 0.8404 | Test_1 Acc 0.4777 | Test_5 Acc 0.7835 |Train Time 0.590 (0.125) |Test Time 4.762 (3.746)
Epoch 0023 | Train_1 Acc 0.5543 | Train_5 Acc 0.8507 | Test_1 Acc 0.4915 | Test_5 Acc 0.7968 |Train Time 0.524 (0.128) |Test Time 4.449 (3.753)
Epoch 0024 | Train_1 Acc 0.5656 | Train_5 Acc 0.8566 | Test_1 Acc 0.4964 | Test_5 Acc 0.7946 |Train Time 0.442 (0.120) |Test Time 4.792 (3.763)
Epoch 0025 | Train_1 Acc 0.5501 | Train_5 Acc 0.8499 | Test_1 Acc 0.4835 | Test_5 Acc 0.7876 |Train Time 0.513 (0.122) |Test Time 4.469 (3.770)
Epoch 0026 | Train_1 Acc 0.5681 | Train_5 Acc 0.8567 | Test_1 Acc 0.5014 | Test_5 Acc 0.8020 |Train Time 0.656 (0.129) |Test Time 4.395 (3.777)
Epoch 0027 | Train_1 Acc 0.5681 | Train_5 Acc 0.8609 | Test_1 Acc 0.4873 | Test_5 Acc 0.7945 |Train Time 0.519 (0.119) |Test Time 5.040 (3.789)
Epoch 0028 | Train_1 Acc 0.5913 | Train_5 Acc 0.8709 | Test_1 Acc 0.5092 | Test_5 Acc 0.8060 |Train Time 0.504 (0.127) |Test Time 4.554 (3.797)
Epoch 0029 | Train_1 Acc 0.5811 | Train_5 Acc 0.8658 | Test_1 Acc 0.5001 | Test_5 Acc 0.8003 |Train Time 0.582 (0.123) |Test Time 4.660 (3.805)
Epoch 0030 | Train_1 Acc 0.5807 | Train_5 Acc 0.8647 | Test_1 Acc 0.4990 | Test_5 Acc 0.7928 |Train Time 0.515 (0.125) |Test Time 4.715 (3.815)
Epoch 0031 | Train_1 Acc 0.6004 | Train_5 Acc 0.8760 | Test_1 Acc 0.5110 | Test_5 Acc 0.8052 |Train Time 0.597 (0.129) |Test Time 4.643 (3.823)
Epoch 0032 | Train_1 Acc 0.5918 | Train_5 Acc 0.8733 | Test_1 Acc 0.4990 | Test_5 Acc 0.7986 |Train Time 0.574 (0.120) |Test Time 4.755 (3.832)
Epoch 0033 | Train_1 Acc 0.5987 | Train_5 Acc 0.8767 | Test_1 Acc 0.5042 | Test_5 Acc 0.7991 |Train Time 0.576 (0.123) |Test Time 4.652 (3.840)
Epoch 0034 | Train_1 Acc 0.6213 | Train_5 Acc 0.8884 | Test_1 Acc 0.5168 | Test_5 Acc 0.8120 |Train Time 0.556 (0.133) |Test Time 5.317 (3.855)
Epoch 0035 | Train_1 Acc 0.6115 | Train_5 Acc 0.8826 | Test_1 Acc 0.5036 | Test_5 Acc 0.8022 |Train Time 0.647 (0.161) |Test Time 4.868 (3.865)
Epoch 0036 | Train_1 Acc 0.6165 | Train_5 Acc 0.8851 | Test_1 Acc 0.5111 | Test_5 Acc 0.8015 |Train Time 0.709 (0.175) |Test Time 5.424 (3.881)
Epoch 0037 | Train_1 Acc 0.6167 | Train_5 Acc 0.8887 | Test_1 Acc 0.5101 | Test_5 Acc 0.8038 |Train Time 0.544 (0.149) |Test Time 5.190 (3.894)
Epoch 0038 | Train_1 Acc 0.6107 | Train_5 Acc 0.8781 | Test_1 Acc 0.5028 | Test_5 Acc 0.7973 |Train Time 0.612 (0.155) |Test Time 4.946 (3.904)
Epoch 0039 | Train_1 Acc 0.6333 | Train_5 Acc 0.8935 | Test_1 Acc 0.5178 | Test_5 Acc 0.8129 |Train Time 0.605 (0.172) |Test Time 5.773 (3.923)
Epoch 0040 | Train_1 Acc 0.6255 | Train_5 Acc 0.8939 | Test_1 Acc 0.5150 | Test_5 Acc 0.8069 |Train Time 0.554 (0.161) |Test Time 5.162 (3.936)
Epoch 0041 | Train_1 Acc 0.6377 | Train_5 Acc 0.8985 | Test_1 Acc 0.5189 | Test_5 Acc 0.8138 |Train Time 0.546 (0.159) |Test Time 5.525 (3.951)
Epoch 0042 | Train_1 Acc 0.6398 | Train_5 Acc 0.9008 | Test_1 Acc 0.5184 | Test_5 Acc 0.8070 |Train Time 0.560 (0.148) |Test Time 5.487 (3.967)
Epoch 0043 | Train_1 Acc 0.6470 | Train_5 Acc 0.9008 | Test_1 Acc 0.5272 | Test_5 Acc 0.8171 |Train Time 0.537 (0.167) |Test Time 5.062 (3.978)
Epoch 0044 | Train_1 Acc 0.6416 | Train_5 Acc 0.8999 | Test_1 Acc 0.5217 | Test_5 Acc 0.8100 |Train Time 0.668 (0.165) |Test Time 5.257 (3.991)
Epoch 0045 | Train_1 Acc 0.6517 | Train_5 Acc 0.9093 | Test_1 Acc 0.5237 | Test_5 Acc 0.8158 |Train Time 0.577 (0.161) |Test Time 4.958 (4.000)
Epoch 0046 | Train_1 Acc 0.6482 | Train_5 Acc 0.9056 | Test_1 Acc 0.5211 | Test_5 Acc 0.8111 |Train Time 0.597 (0.160) |Test Time 5.197 (4.012)
Epoch 0047 | Train_1 Acc 0.6603 | Train_5 Acc 0.9114 | Test_1 Acc 0.5278 | Test_5 Acc 0.8213 |Train Time 0.570 (0.166) |Test Time 5.215 (4.024)
Epoch 0048 | Train_1 Acc 0.6462 | Train_5 Acc 0.9012 | Test_1 Acc 0.5211 | Test_5 Acc 0.8056 |Train Time 0.614 (0.163) |Test Time 5.643 (4.040)
Epoch 0049 | Train_1 Acc 0.6474 | Train_5 Acc 0.9055 | Test_1 Acc 0.5207 | Test_5 Acc 0.8152 |Train Time 0.636 (0.166) |Test Time 5.546 (4.055)
Epoch 0050 | Train_1 Acc 0.6589 | Train_5 Acc 0.9111 | Test_1 Acc 0.5219 | Test_5 Acc 0.8163 |Train Time 0.572 (0.148) |Test Time 5.280 (4.068)
Epoch 0051 | Train_1 Acc 0.6638 | Train_5 Acc 0.9139 | Test_1 Acc 0.5303 | Test_5 Acc 0.8186 |Train Time 0.554 (0.166) |Test Time 5.287 (4.080)
Epoch 0052 | Train_1 Acc 0.6664 | Train_5 Acc 0.9149 | Test_1 Acc 0.5244 | Test_5 Acc 0.8208 |Train Time 0.582 (0.164) |Test Time 5.376 (4.093)
Epoch 0053 | Train_1 Acc 0.6792 | Train_5 Acc 0.9221 | Test_1 Acc 0.5279 | Test_5 Acc 0.8196 |Train Time 0.707 (0.161) |Test Time 5.125 (4.103)
Epoch 0054 | Train_1 Acc 0.6779 | Train_5 Acc 0.9210 | Test_1 Acc 0.5337 | Test_5 Acc 0.8209 |Train Time 0.639 (0.158) |Test Time 5.011 (4.112)
Epoch 0055 | Train_1 Acc 0.6582 | Train_5 Acc 0.9076 | Test_1 Acc 0.5128 | Test_5 Acc 0.8027 |Train Time 0.635 (0.154) |Test Time 5.326 (4.124)
Epoch 0056 | Train_1 Acc 0.6821 | Train_5 Acc 0.9228 | Test_1 Acc 0.5298 | Test_5 Acc 0.8205 |Train Time 0.544 (0.169) |Test Time 5.060 (4.134)
Epoch 0057 | Train_1 Acc 0.6723 | Train_5 Acc 0.9175 | Test_1 Acc 0.5246 | Test_5 Acc 0.8168 |Train Time 0.633 (0.168) |Test Time 5.296 (4.145)
Epoch 0058 | Train_1 Acc 0.6777 | Train_5 Acc 0.9223 | Test_1 Acc 0.5218 | Test_5 Acc 0.8210 |Train Time 0.625 (0.157) |Test Time 4.958 (4.153)
Epoch 0059 | Train_1 Acc 0.6759 | Train_5 Acc 0.9202 | Test_1 Acc 0.5194 | Test_5 Acc 0.8153 |Train Time 0.756 (0.166) |Test Time 5.208 (4.164)
Epoch 0060 | Train_1 Acc 0.6842 | Train_5 Acc 0.9248 | Test_1 Acc 0.5272 | Test_5 Acc 0.8231 |Train Time 0.644 (0.166) |Test Time 5.142 (4.174)
Epoch 0061 | Train_1 Acc 0.7414 | Train_5 Acc 0.9462 | Test_1 Acc 0.5545 | Test_5 Acc 0.8368 |Train Time 0.641 (0.165) |Test Time 4.919 (4.181)
Epoch 0062 | Train_1 Acc 0.7448 | Train_5 Acc 0.9483 | Test_1 Acc 0.5562 | Test_5 Acc 0.8376 |Train Time 0.598 (0.157) |Test Time 5.132 (4.191)
Epoch 0063 | Train_1 Acc 0.7480 | Train_5 Acc 0.9457 | Test_1 Acc 0.5566 | Test_5 Acc 0.8379 |Train Time 0.726 (0.155) |Test Time 5.053 (4.199)
Epoch 0064 | Train_1 Acc 0.7539 | Train_5 Acc 0.9502 | Test_1 Acc 0.5521 | Test_5 Acc 0.8389 |Train Time 0.674 (0.167) |Test Time 4.993 (4.207)
Epoch 0065 | Train_1 Acc 0.7543 | Train_5 Acc 0.9507 | Test_1 Acc 0.5549 | Test_5 Acc 0.8392 |Train Time 0.640 (0.163) |Test Time 5.467 (4.220)
Epoch 0066 | Train_1 Acc 0.7542 | Train_5 Acc 0.9486 | Test_1 Acc 0.5598 | Test_5 Acc 0.8412 |Train Time 0.600 (0.152) |Test Time 5.043 (4.228)
Epoch 0067 | Train_1 Acc 0.7580 | Train_5 Acc 0.9526 | Test_1 Acc 0.5566 | Test_5 Acc 0.8391 |Train Time 0.605 (0.156) |Test Time 5.394 (4.240)
Epoch 0068 | Train_1 Acc 0.7578 | Train_5 Acc 0.9513 | Test_1 Acc 0.5572 | Test_5 Acc 0.8360 |Train Time 0.733 (0.153) |Test Time 5.180 (4.249)
Epoch 0069 | Train_1 Acc 0.7615 | Train_5 Acc 0.9535 | Test_1 Acc 0.5553 | Test_5 Acc 0.8386 |Train Time 0.547 (0.172) |Test Time 5.309 (4.260)
Epoch 0070 | Train_1 Acc 0.7600 | Train_5 Acc 0.9521 | Test_1 Acc 0.5547 | Test_5 Acc 0.8392 |Train Time 0.614 (0.154) |Test Time 5.037 (4.268)
Epoch 0071 | Train_1 Acc 0.7611 | Train_5 Acc 0.9531 | Test_1 Acc 0.5575 | Test_5 Acc 0.8377 |Train Time 0.550 (0.145) |Test Time 4.999 (4.275)
Epoch 0072 | Train_1 Acc 0.7614 | Train_5 Acc 0.9538 | Test_1 Acc 0.5597 | Test_5 Acc 0.8379 |Train Time 0.758 (0.170) |Test Time 5.075 (4.283)
Epoch 0073 | Train_1 Acc 0.7643 | Train_5 Acc 0.9541 | Test_1 Acc 0.5574 | Test_5 Acc 0.8379 |Train Time 0.714 (0.157) |Test Time 5.137 (4.291)
Epoch 0074 | Train_1 Acc 0.7635 | Train_5 Acc 0.9545 | Test_1 Acc 0.5567 | Test_5 Acc 0.8368 |Train Time 0.580 (0.153) |Test Time 4.836 (4.297)
Epoch 0075 | Train_1 Acc 0.7680 | Train_5 Acc 0.9554 | Test_1 Acc 0.5600 | Test_5 Acc 0.8405 |Train Time 0.527 (0.153) |Test Time 5.020 (4.304)
Epoch 0076 | Train_1 Acc 0.7678 | Train_5 Acc 0.9549 | Test_1 Acc 0.5556 | Test_5 Acc 0.8395 |Train Time 0.606 (0.154) |Test Time 5.223 (4.313)
Epoch 0077 | Train_1 Acc 0.7688 | Train_5 Acc 0.9565 | Test_1 Acc 0.5559 | Test_5 Acc 0.8400 |Train Time 0.624 (0.167) |Test Time 5.008 (4.320)
Epoch 0078 | Train_1 Acc 0.7679 | Train_5 Acc 0.9575 | Test_1 Acc 0.5601 | Test_5 Acc 0.8395 |Train Time 0.565 (0.156) |Test Time 5.548 (4.333)
Epoch 0079 | Train_1 Acc 0.7674 | Train_5 Acc 0.9564 | Test_1 Acc 0.5536 | Test_5 Acc 0.8374 |Train Time 0.539 (0.144) |Test Time 5.449 (4.344)
Epoch 0080 | Train_1 Acc 0.7691 | Train_5 Acc 0.9579 | Test_1 Acc 0.5565 | Test_5 Acc 0.8399 |Train Time 0.574 (0.167) |Test Time 5.046 (4.351)
Epoch 0081 | Train_1 Acc 0.7720 | Train_5 Acc 0.9575 | Test_1 Acc 0.5584 | Test_5 Acc 0.8376 |Train Time 0.646 (0.155) |Test Time 5.135 (4.359)
Epoch 0082 | Train_1 Acc 0.7707 | Train_5 Acc 0.9570 | Test_1 Acc 0.5588 | Test_5 Acc 0.8362 |Train Time 0.605 (0.158) |Test Time 5.049 (4.365)
Epoch 0083 | Train_1 Acc 0.7765 | Train_5 Acc 0.9575 | Test_1 Acc 0.5544 | Test_5 Acc 0.8374 |Train Time 0.700 (0.155) |Test Time 4.954 (4.371)
Epoch 0084 | Train_1 Acc 0.7752 | Train_5 Acc 0.9586 | Test_1 Acc 0.5588 | Test_5 Acc 0.8370 |Train Time 0.598 (0.155) |Test Time 4.961 (4.377)
Epoch 0085 | Train_1 Acc 0.7750 | Train_5 Acc 0.9597 | Test_1 Acc 0.5566 | Test_5 Acc 0.8350 |Train Time 0.507 (0.162) |Test Time 5.192 (4.385)
Epoch 0086 | Train_1 Acc 0.7749 | Train_5 Acc 0.9595 | Test_1 Acc 0.5554 | Test_5 Acc 0.8367 |Train Time 1.032 (0.164) |Test Time 4.851 (4.390)
Epoch 0087 | Train_1 Acc 0.7777 | Train_5 Acc 0.9601 | Test_1 Acc 0.5565 | Test_5 Acc 0.8374 |Train Time 0.680 (0.154) |Test Time 4.720 (4.393)
Epoch 0088 | Train_1 Acc 0.7766 | Train_5 Acc 0.9598 | Test_1 Acc 0.5570 | Test_5 Acc 0.8381 |Train Time 0.527 (0.161) |Test Time 5.166 (4.401)
Epoch 0089 | Train_1 Acc 0.7772 | Train_5 Acc 0.9598 | Test_1 Acc 0.5558 | Test_5 Acc 0.8363 |Train Time 0.757 (0.165) |Test Time 5.398 (4.411)
Epoch 0090 | Train_1 Acc 0.7791 | Train_5 Acc 0.9609 | Test_1 Acc 0.5564 | Test_5 Acc 0.8370 |Train Time 0.580 (0.166) |Test Time 4.893 (4.416)
Epoch 0091 | Train_1 Acc 0.7764 | Train_5 Acc 0.9611 | Test_1 Acc 0.5561 | Test_5 Acc 0.8339 |Train Time 0.535 (0.146) |Test Time 5.077 (4.422)
Epoch 0092 | Train_1 Acc 0.7797 | Train_5 Acc 0.9611 | Test_1 Acc 0.5544 | Test_5 Acc 0.8362 |Train Time 0.591 (0.161) |Test Time 5.542 (4.434)
Epoch 0093 | Train_1 Acc 0.7783 | Train_5 Acc 0.9617 | Test_1 Acc 0.5537 | Test_5 Acc 0.8389 |Train Time 0.557 (0.165) |Test Time 4.901 (4.438)
Epoch 0094 | Train_1 Acc 0.7833 | Train_5 Acc 0.9613 | Test_1 Acc 0.5551 | Test_5 Acc 0.8359 |Train Time 0.484 (0.151) |Test Time 5.310 (4.447)
Epoch 0095 | Train_1 Acc 0.7783 | Train_5 Acc 0.9605 | Test_1 Acc 0.5571 | Test_5 Acc 0.8324 |Train Time 0.497 (0.159) |Test Time 5.035 (4.453)
Epoch 0096 | Train_1 Acc 0.7817 | Train_5 Acc 0.9626 | Test_1 Acc 0.5579 | Test_5 Acc 0.8365 |Train Time 0.604 (0.165) |Test Time 4.891 (4.457)
Epoch 0097 | Train_1 Acc 0.7845 | Train_5 Acc 0.9631 | Test_1 Acc 0.5546 | Test_5 Acc 0.8359 |Train Time 0.507 (0.152) |Test Time 5.800 (4.471)
Epoch 0098 | Train_1 Acc 0.7827 | Train_5 Acc 0.9628 | Test_1 Acc 0.5535 | Test_5 Acc 0.8332 |Train Time 0.557 (0.167) |Test Time 4.686 (4.473)
Epoch 0099 | Train_1 Acc 0.7848 | Train_5 Acc 0.9621 | Test_1 Acc 0.5527 | Test_5 Acc 0.8344 |Train Time 0.548 (0.147) |Test Time 4.854 (4.477)
Epoch 0100 | Train_1 Acc 0.7811 | Train_5 Acc 0.9637 | Test_1 Acc 0.5570 | Test_5 Acc 0.8362 |Train Time 0.539 (0.159) |Test Time 4.746 (4.479)
Epoch 0101 | Train_1 Acc 0.7906 | Train_5 Acc 0.9635 | Test_1 Acc 0.5566 | Test_5 Acc 0.8371 |Train Time 0.592 (0.164) |Test Time 4.578 (4.480)
Epoch 0102 | Train_1 Acc 0.7918 | Train_5 Acc 0.9650 | Test_1 Acc 0.5578 | Test_5 Acc 0.8380 |Train Time 0.501 (0.150) |Test Time 4.516 (4.481)
Epoch 0103 | Train_1 Acc 0.7908 | Train_5 Acc 0.9643 | Test_1 Acc 0.5567 | Test_5 Acc 0.8376 |Train Time 0.590 (0.145) |Test Time 4.113 (4.477)
Epoch 0104 | Train_1 Acc 0.7904 | Train_5 Acc 0.9644 | Test_1 Acc 0.5547 | Test_5 Acc 0.8375 |Train Time 0.496 (0.155) |Test Time 4.419 (4.476)
Epoch 0105 | Train_1 Acc 0.7925 | Train_5 Acc 0.9651 | Test_1 Acc 0.5577 | Test_5 Acc 0.8377 |Train Time 0.432 (0.147) |Test Time 4.135 (4.473)
Epoch 0106 | Train_1 Acc 0.7917 | Train_5 Acc 0.9652 | Test_1 Acc 0.5562 | Test_5 Acc 0.8386 |Train Time 0.802 (0.152) |Test Time 4.121 (4.470)
Epoch 0107 | Train_1 Acc 0.7902 | Train_5 Acc 0.9660 | Test_1 Acc 0.5567 | Test_5 Acc 0.8376 |Train Time 0.452 (0.141) |Test Time 4.444 (4.469)
Epoch 0108 | Train_1 Acc 0.7948 | Train_5 Acc 0.9648 | Test_1 Acc 0.5566 | Test_5 Acc 0.8385 |Train Time 0.480 (0.151) |Test Time 4.831 (4.473)
Epoch 0109 | Train_1 Acc 0.7926 | Train_5 Acc 0.9651 | Test_1 Acc 0.5572 | Test_5 Acc 0.8374 |Train Time 0.660 (0.160) |Test Time 4.248 (4.471)
Epoch 0110 | Train_1 Acc 0.7922 | Train_5 Acc 0.9652 | Test_1 Acc 0.5574 | Test_5 Acc 0.8372 |Train Time 0.529 (0.136) |Test Time 4.098 (4.467)
Epoch 0111 | Train_1 Acc 0.7920 | Train_5 Acc 0.9645 | Test_1 Acc 0.5579 | Test_5 Acc 0.8382 |Train Time 0.455 (0.153) |Test Time 3.827 (4.461)
Epoch 0112 | Train_1 Acc 0.7929 | Train_5 Acc 0.9664 | Test_1 Acc 0.5584 | Test_5 Acc 0.8393 |Train Time 0.492 (0.155) |Test Time 4.291 (4.459)
Epoch 0113 | Train_1 Acc 0.7922 | Train_5 Acc 0.9649 | Test_1 Acc 0.5573 | Test_5 Acc 0.8384 |Train Time 0.517 (0.149) |Test Time 4.181 (4.456)
Epoch 0114 | Train_1 Acc 0.7944 | Train_5 Acc 0.9650 | Test_1 Acc 0.5582 | Test_5 Acc 0.8376 |Train Time 0.471 (0.144) |Test Time 5.241 (4.464)
Epoch 0115 | Train_1 Acc 0.7927 | Train_5 Acc 0.9650 | Test_1 Acc 0.5577 | Test_5 Acc 0.8388 |Train Time 0.527 (0.152) |Test Time 4.527 (4.465)
Epoch 0116 | Train_1 Acc 0.7924 | Train_5 Acc 0.9651 | Test_1 Acc 0.5563 | Test_5 Acc 0.8387 |Train Time 0.540 (0.155) |Test Time 4.292 (4.463)
Epoch 0117 | Train_1 Acc 0.7930 | Train_5 Acc 0.9657 | Test_1 Acc 0.5569 | Test_5 Acc 0.8385 |Train Time 0.524 (0.157) |Test Time 4.165 (4.460)
Epoch 0118 | Train_1 Acc 0.7937 | Train_5 Acc 0.9645 | Test_1 Acc 0.5564 | Test_5 Acc 0.8382 |Train Time 0.554 (0.128) |Test Time 4.007 (4.455)
Epoch 0119 | Train_1 Acc 0.7955 | Train_5 Acc 0.9659 | Test_1 Acc 0.5570 | Test_5 Acc 0.8381 |Train Time 0.493 (0.135) |Test Time 4.419 (4.455)
Epoch 0120 | Train_1 Acc 0.7939 | Train_5 Acc 0.9655 | Test_1 Acc 0.5571 | Test_5 Acc 0.8387 |Train Time 0.528 (0.131) |Test Time 4.071 (4.451)
Epoch 0121 | Train_1 Acc 0.7949 | Train_5 Acc 0.9659 | Test_1 Acc 0.5581 | Test_5 Acc 0.8372 |Train Time 0.557 (0.131) |Test Time 4.040 (4.447)
Epoch 0122 | Train_1 Acc 0.7937 | Train_5 Acc 0.9651 | Test_1 Acc 0.5565 | Test_5 Acc 0.8390 |Train Time 0.490 (0.136) |Test Time 4.094 (4.443)
Epoch 0123 | Train_1 Acc 0.7937 | Train_5 Acc 0.9650 | Test_1 Acc 0.5560 | Test_5 Acc 0.8375 |Train Time 0.587 (0.131) |Test Time 4.125 (4.440)
Epoch 0124 | Train_1 Acc 0.7936 | Train_5 Acc 0.9652 | Test_1 Acc 0.5569 | Test_5 Acc 0.8389 |Train Time 0.460 (0.135) |Test Time 3.914 (4.435)
Epoch 0125 | Train_1 Acc 0.7967 | Train_5 Acc 0.9664 | Test_1 Acc 0.5585 | Test_5 Acc 0.8382 |Train Time 0.434 (0.133) |Test Time 4.034 (4.431)
Epoch 0126 | Train_1 Acc 0.7929 | Train_5 Acc 0.9644 | Test_1 Acc 0.5565 | Test_5 Acc 0.8382 |Train Time 0.555 (0.127) |Test Time 4.088 (4.428)
Epoch 0127 | Train_1 Acc 0.7931 | Train_5 Acc 0.9658 | Test_1 Acc 0.5587 | Test_5 Acc 0.8379 |Train Time 0.573 (0.137) |Test Time 4.366 (4.427)
Epoch 0128 | Train_1 Acc 0.7948 | Train_5 Acc 0.9653 | Test_1 Acc 0.5573 | Test_5 Acc 0.8376 |Train Time 0.494 (0.135) |Test Time 4.054 (4.423)
Epoch 0129 | Train_1 Acc 0.7939 | Train_5 Acc 0.9649 | Test_1 Acc 0.5575 | Test_5 Acc 0.8386 |Train Time 0.508 (0.127) |Test Time 3.966 (4.419)
Epoch 0130 | Train_1 Acc 0.7951 | Train_5 Acc 0.9661 | Test_1 Acc 0.5586 | Test_5 Acc 0.8377 |Train Time 0.456 (0.133) |Test Time 4.374 (4.418)
Epoch 0131 | Train_1 Acc 0.7978 | Train_5 Acc 0.9658 | Test_1 Acc 0.5572 | Test_5 Acc 0.8392 |Train Time 0.460 (0.126) |Test Time 4.039 (4.414)
Epoch 0132 | Train_1 Acc 0.7942 | Train_5 Acc 0.9655 | Test_1 Acc 0.5564 | Test_5 Acc 0.8375 |Train Time 0.440 (0.133) |Test Time 4.204 (4.412)
Epoch 0133 | Train_1 Acc 0.7949 | Train_5 Acc 0.9667 | Test_1 Acc 0.5552 | Test_5 Acc 0.8378 |Train Time 0.500 (0.135) |Test Time 4.313 (4.411)
Epoch 0134 | Train_1 Acc 0.7948 | Train_5 Acc 0.9659 | Test_1 Acc 0.5567 | Test_5 Acc 0.8388 |Train Time 0.505 (0.128) |Test Time 3.814 (4.405)
Epoch 0135 | Train_1 Acc 0.7946 | Train_5 Acc 0.9663 | Test_1 Acc 0.5568 | Test_5 Acc 0.8393 |Train Time 0.464 (0.132) |Test Time 4.006 (4.401)
Epoch 0136 | Train_1 Acc 0.7951 | Train_5 Acc 0.9670 | Test_1 Acc 0.5576 | Test_5 Acc 0.8373 |Train Time 0.458 (0.130) |Test Time 3.963 (4.397)
Epoch 0137 | Train_1 Acc 0.7973 | Train_5 Acc 0.9675 | Test_1 Acc 0.5580 | Test_5 Acc 0.8381 |Train Time 0.672 (0.136) |Test Time 4.957 (4.403)
Epoch 0138 | Train_1 Acc 0.7977 | Train_5 Acc 0.9659 | Test_1 Acc 0.5556 | Test_5 Acc 0.8395 |Train Time 0.526 (0.132) |Test Time 4.109 (4.400)
Epoch 0139 | Train_1 Acc 0.7951 | Train_5 Acc 0.9657 | Test_1 Acc 0.5573 | Test_5 Acc 0.8384 |Train Time 0.489 (0.127) |Test Time 3.986 (4.396)
Epoch 0140 | Train_1 Acc 0.7974 | Train_5 Acc 0.9670 | Test_1 Acc 0.5561 | Test_5 Acc 0.8376 |Train Time 0.458 (0.133) |Test Time 4.433 (4.396)
Epoch 0141 | Train_1 Acc 0.7963 | Train_5 Acc 0.9663 | Test_1 Acc 0.5573 | Test_5 Acc 0.8380 |Train Time 0.458 (0.131) |Test Time 4.398 (4.396)
Epoch 0142 | Train_1 Acc 0.7958 | Train_5 Acc 0.9669 | Test_1 Acc 0.5569 | Test_5 Acc 0.8382 |Train Time 0.540 (0.128) |Test Time 4.102 (4.393)
Epoch 0143 | Train_1 Acc 0.7949 | Train_5 Acc 0.9666 | Test_1 Acc 0.5565 | Test_5 Acc 0.8381 |Train Time 0.550 (0.138) |Test Time 4.399 (4.393)
Epoch 0144 | Train_1 Acc 0.7940 | Train_5 Acc 0.9658 | Test_1 Acc 0.5568 | Test_5 Acc 0.8386 |Train Time 0.441 (0.129) |Test Time 3.548 (4.385)
Epoch 0145 | Train_1 Acc 0.7959 | Train_5 Acc 0.9658 | Test_1 Acc 0.5570 | Test_5 Acc 0.8383 |Train Time 0.399 (0.127) |Test Time 3.531 (4.376)
Epoch 0146 | Train_1 Acc 0.7937 | Train_5 Acc 0.9666 | Test_1 Acc 0.5566 | Test_5 Acc 0.8380 |Train Time 0.565 (0.136) |Test Time 4.064 (4.373)
Epoch 0147 | Train_1 Acc 0.7974 | Train_5 Acc 0.9659 | Test_1 Acc 0.5572 | Test_5 Acc 0.8383 |Train Time 0.398 (0.121) |Test Time 3.439 (4.364)
Epoch 0148 | Train_1 Acc 0.7967 | Train_5 Acc 0.9663 | Test_1 Acc 0.5566 | Test_5 Acc 0.8383 |Train Time 0.465 (0.131) |Test Time 3.693 (4.357)
Epoch 0149 | Train_1 Acc 0.7982 | Train_5 Acc 0.9669 | Test_1 Acc 0.5565 | Test_5 Acc 0.8380 |Train Time 0.444 (0.128) |Test Time 3.368 (4.347)
Epoch 0150 | Train_1 Acc 0.7971 | Train_5 Acc 0.9665 | Test_1 Acc 0.5566 | Test_5 Acc 0.8373 |Train Time 0.502 (0.126) |Test Time 3.962 (4.343)
Epoch 0151 | Train_1 Acc 0.7958 | Train_5 Acc 0.9664 | Test_1 Acc 0.5567 | Test_5 Acc 0.8377 |Train Time 0.429 (0.128) |Test Time 3.434 (4.334)
Epoch 0152 | Train_1 Acc 0.7975 | Train_5 Acc 0.9665 | Test_1 Acc 0.5570 | Test_5 Acc 0.8380 |Train Time 0.437 (0.122) |Test Time 3.969 (4.330)
Epoch 0153 | Train_1 Acc 0.7969 | Train_5 Acc 0.9663 | Test_1 Acc 0.5564 | Test_5 Acc 0.8385 |Train Time 0.511 (0.132) |Test Time 3.106 (4.318)
Epoch 0154 | Train_1 Acc 0.7951 | Train_5 Acc 0.9669 | Test_1 Acc 0.5559 | Test_5 Acc 0.8383 |Train Time 0.431 (0.127) |Test Time 4.006 (4.315)
Epoch 0155 | Train_1 Acc 0.7969 | Train_5 Acc 0.9665 | Test_1 Acc 0.5571 | Test_5 Acc 0.8383 |Train Time 0.478 (0.124) |Test Time 3.244 (4.304)
Epoch 0156 | Train_1 Acc 0.7959 | Train_5 Acc 0.9665 | Test_1 Acc 0.5563 | Test_5 Acc 0.8382 |Train Time 0.510 (0.131) |Test Time 3.562 (4.297)
Epoch 0157 | Train_1 Acc 0.7973 | Train_5 Acc 0.9659 | Test_1 Acc 0.5567 | Test_5 Acc 0.8380 |Train Time 0.417 (0.122) |Test Time 3.374 (4.288)
Epoch 0158 | Train_1 Acc 0.7972 | Train_5 Acc 0.9666 | Test_1 Acc 0.5567 | Test_5 Acc 0.8376 |Train Time 0.446 (0.125) |Test Time 3.461 (4.279)
Epoch 0159 | Train_1 Acc 0.7976 | Train_5 Acc 0.9661 | Test_1 Acc 0.5562 | Test_5 Acc 0.8375 |Train Time 0.436 (0.130) |Test Time 3.379 (4.270)
